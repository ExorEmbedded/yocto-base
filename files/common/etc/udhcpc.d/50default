#!/bin/sh

# udhcpc script edited by Tim Riker <Tim@Rikers.org>

[ -z "$1" ] && echo "Error: should be called from udhcpc" && exit 1

RESOLV_CONF="/etc/resolv.conf"
RESOLV_CONF_TMP="$RESOLV_CONF".tmp
[ -n "$broadcast" ] && BROADCAST="broadcast $broadcast"
[ -n "$subnet" ] && NETMASK="netmask $subnet"

GLOBAL_DEFAULTS="/etc/network/defaults"
if [ -e "${GLOBAL_DEFAULTS}" ]; then
    . "${GLOBAL_DEFAULTS}"
fi
. /etc/exorint.funcs

DEFAULTS="/etc/network/defaults-$interface"
if [ -e "${DEFAULTS}" ]; then
    . "${DEFAULTS}"
    DFT_BROADCAST="broadcast $dft_broadcast"
fi

# 'nuts' utility functions
NUTS_OPTIMIZE="1"
UTILS="/etc/nuts.funcs"
if [ -e "${UTILS}" ]; then
    . "${UTILS}"
fi

# return 0 if root is mounted on a network filesystem
root_is_nfs() {
    sed -n 's/^[^ ]* \([^ ]*\) \([^ ]*\) .*$/\1 \2/p' /proc/mounts |
    grep -q "^/ \(nfs\|smbfs\|ncp\|coda\)$"
}

case "$1" in
    deconfig)

        if [ -x /sbin/resolvconf ]; then
            /sbin/resolvconf -d "${interface}.udhcpc"
        fi

        # default IP handled via avahi-autoipd
        exit 0

        if ! root_is_nfs ; then
            ip addr flush dev $interface
            ip link set dev $interface up
            if [ -e "${DEFAULTS}" ]; then
                ip addr add dev $interface $dft_ip/$dft_mask $DFT_BROADCAST
            fi
        fi
        ;;

    renew|bound)


        ip addr flush dev $interface
        ip addr add dev $interface local $ip/$mask $BROADCAST

        if [ -n "$router" ] ; then
            if ! root_is_nfs ; then
                while ip route del dev $interface default 2>/dev/null ; do
                    :
                done
            fi

            metric=$(exorint_iface_metric $interface)

            for i in $router ; do
                ip route add default via $i dev $interface metric $metric
                metric=$(($metric + 1))
            done
        fi

        exorint_iface_metric_apply $interface

        # Update resolver configuration file
        R=""
        [ -n "$domain" ] && R="domain $domain
"
        for i in $dns; do
            echo "$0: Adding DNS $i"
            R="${R}nameserver $i
"
        done

        if [ -x /sbin/resolvconf ]; then
            echo -n "$R" | /sbin/resolvconf -a "${interface}.udhcpc"
        else
            # append configuration generated by JMUConfig
            > "$RESOLV_CONF_TMP"
            OLDIFS=$IFS; IFS=$'\n'
            for r in $R; do
                grep -q "$r" "$RESOLV_CONF" || echo "$r" >> "$RESOLV_CONF_TMP"
            done
            IFS=$OLDIFS
            cat "$RESOLV_CONF" >> "$RESOLV_CONF_TMP"
            mv "$RESOLV_CONF_TMP" "$RESOLV_CONF"
        fi

        ;;
esac

exit 0
