# System-wide utility functions
#
# Note: uses Bash-specific syntax

. /etc/network/defaults

# e.g. "US01HSXXM01002003AB"
BSP_VERSION="$(cat /boot/version)"
if [[ ${#BSP_VERSION} -ne 17 && ${#BSP_VERSION} -ne 19 ]]; then
    echo "[exorint.funcs] panic: bad BSP_VERSION: ${BSP_VERSION}"
    exit 1
fi

# Read the hw code from SEEPROM
HW_CODE="$(dd if=/sys/class/i2c-dev/i2c-0/device/0-0054/eeprom bs=1 count=1 skip=4 2>/dev/null | hexdump -e '16/1 "%02d"' | xargs)"

exorint_hwcode()
{
    echo -n "${HW_CODE}"
}

# e.g. "UN60"
exorint_ver_bsp()
{
    echo -n "${BSP_VERSION:0:4}"
}

# e.g. "HSXX"
exorint_ver_carrier()
{
    echo -n "${BSP_VERSION:4:4}"
}

# e.g. "M"
exorint_ver_component()
{
    echo -n "${BSP_VERSION:8:1}"
}

# Get major component of version
exorint_ver_major()
{
    echo -n "$(( 10#${BSP_VERSION:9:2} ))"
}

# Get minor component of version
exorint_ver_minor()
{
    echo -n "$(( 10#${BSP_VERSION:11:3} ))"
}

# Get build component of version
exorint_ver_build()
{
    echo -n "$(( 10#${BSP_VERSION:14:3} ))"
}

# Get product type based on carrier
exorint_ver_type()
{

    # We want to identify the eXware as ROUTER. As the carrier name is the same as
    # the eX705 we need to use the hw code to distinguish between the two.
    # 127 is the eXware hw code.
    if [ -n "$HW_CODE" -a "$HW_CODE" -eq "127" ]; then
            echo -n "ROUTER"
            return
    fi

    case $(exorint_ver_carrier) in
        PLCM)
            echo -n "ROUTER"
            ;;
        NA16)
            echo -n "DEVICE"
            ;;
        *)
            echo -n "HMI"
            ;;
    esac
}

# Returns 0 if we are in mainos
exorint_in_mainos()
{
    [ "$(exorint_ver_component)" = "M" ] && return 0

    return 1
}

# Returns 0 if we are in configos
exorint_in_configos()
{
    [ "$(exorint_ver_component)" = "C" ] && return 0

    return 1
}

# Generate hostname based on product type and last 4 digits of eth0 mac
# e.g. "HMI-3e9b-recovery"   (see #198)
exorint_hostname()
{
    exorint_ver_type
    echo -n "-"
    cat /sys/class/net/eth0/address | cut -d ':' -f 5- | sed 's/://' | tr -d '\n'
    exorint_in_configos && echo -n "-recovery"

    return 0
}

# Gets SWFlagArea bit value. Returns 1 and a 0 value on error or area not set (invalid checksum)
# $1 bit offset
exorint_swflagarea_bit()
{
    if [ -z "$1" ];then
        echo 0
        return 1;
    fi

    local swFlagArea="$(dd if=/sys/bus/i2c/devices/0-0054/eeprom skip=248 bs=1 count=7 2>/dev/null | hexdump -e '16/1 "%02x "')"
    local swFlagArea_chksum="$(dd if=/sys/bus/i2c/devices/0-0054/eeprom skip=255 bs=1 count=1 2>/dev/null | hexdump -e '16/1 "%02x "')"

    # 1 - 0xAA
    local chksum="-169"

    for byte in $swFlagArea; do
        chksum=$(( $chksum + 0x${byte} ))
    done

    chksum=$(( $chksum & 255 ))

    if [ "$chksum" -ne $(( 0x${swFlagArea_chksum} )) ]; then
       echo 0
       return 1
    fi

    local rbyte=$(( ${1}/8 +1))
    local roffset=$(( 1 << ( ${1} & 7) ))

    if [ "$(( 0x$( echo ${swFlagArea} | cut -d' ' -f ${rbyte}) & ${roffset} ))" -ne 0 ]; then
       echo 1
    else
       echo 0
    fi

    return 0
}

# Activation of quota on data partition
# $1 data partitin device
# $2 reserved space
exorint_data_quotaon()
{
    local DATAPARTITION=$1
    local DATAPARTITIONRESERVED=$2
    local DATAPARTITIONDF=`df -k $DATAPARTITION | tail -1`
    local DATAPARTITIONUSED=`echo $DATAPARTITIONDF | awk '{printf $3}'`
    local DATAPARTITIONFREE=`echo $DATAPARTITIONDF | awk '{printf $4}'`
    local DATAPARTITIONQUOTA=`echo $DATAPARTITIONUSED + $DATAPARTITIONFREE - $DATAPARTITIONRESERVED | bc`

    # Setup quota for data group users
    quotacheck -cug $DATAPARTITION
    chown root:root $DATAPARTITION/aquota*
    setquota -g data 0 $DATAPARTITIONQUOTA 0 0 $DATAPARTITION
    quotaon $DATAPARTITION
}

exorint_iface_metric()
{
    local iface=$1
    local metric=999
    local type=$(cat /sys/class/net/$iface/type)

    if [ $iface = "br0" ]; then
       metric=50
    elif [ $iface = $WAN_INTERFACE ]; then
       metric=60
    elif echo $iface | grep -E -q "^eth[0-9]+"; then
       metric=$(( 100 + (${iface:3}*10) )) # ethX has metric 100+10x
    elif [ $type -eq 512 ]; then  # ppp
       metric=80
    elif iw dev | grep -q "Interface $iface"; then
       metric=70
    fi

    echo $metric
}

exorint_iface_metric_apply()
{
    local iface=$1
    local metric=$2
    local _dest
    local _gw
    local _mask
    local _metric
    local _args

    [ -z $metric ] && metric=$(exorint_iface_metric $iface)

    route -n | grep $iface | while read -r line; do
        _dest=$(echo $line | cut -d ' ' -f 1)
        _gw=$(echo $line | cut -d ' ' -f 2)
        _mask=$(echo $line | cut -d ' ' -f 3)
        _metric=$(echo $line | cut -d ' ' -f 5)

        [ "$metric" = "$_metric" ] && continue

        ip route flush $_dest/$_mask dev $iface
        _args="add $_dest/$_mask dev $iface metric $metric"
        [ "$_gw" != "0.0.0.0" ] && _args="$_args via $_gw"
        ip route $_args
    done
}

exorint_service_enable()
{
    local name=$1
    local svcFile="/usr/share/jmuconfig/services.json"
    local paramsOffset=5
    local initFile="/etc/rc5.d/.${name}.inited"  # preserved during migration

    [ -z ${name} ] && return 1
    [ -e ${initFile} ] && return 2
    initParams=$(grep -A ${paramsOffset} "\"id\" :.*\"$(eval echo ${name})\"" ${svcFile} | \
        grep '"init_params"' | cut -d ':' -f 2 | sed 's/ *"//' | sed 's/".//')
    [ $? -eq 0 ] || return 3

    update-rc.d ${name} ${initParams}
    touch ${initFile}
}

exorint_fix_settings()
{
    local tmpDir=$1
    [ -z ${tmpDir} ] && tmpDir="/tmp"
    local nlines
    local ntrunc=30
    local resolvFile="/etc/resolv.conf"
    local tmpFile="${tmpDir}/resolv.conf.tmp"

    [ -e ${resolvFile} ] || return 0

    nlines=$(wc -l ${resolvFile} | cut -d ' ' -f 1)
    [ ${nlines} -lt ${ntrunc} ] && return 0

    echo "*** WARNING ***: applying ${resolvFile} fix - tmpFile: ${tmpFile}"

    mkdir -p ${tmpDir}/$(dirname ${resolvFile})
    echo "# WARNING: created by exorint_fix_settings()" > ${tmpFile}
    cat ${resolvFile} | uniq | head -n ${ntrunc} >> ${tmpFile}
    mv ${tmpFile} ${resolvFile} 
    sync
}

exorint_apply_default_settings()
{
   local what=0

   for option in $@; do
      case "$option" in
      network)
         what=$(($what | 0x1))
         ;;
      display)
         what=$(($what | 0x2))
         ;;
      services)
         what=$(($what | 0x4))
         ;;
      esac
   done

   [ "$what" -eq 0 ] && what=$((0xff))

   ( pidof psplash ) && psplash-write "QUIT" && sleep 2

   local rotation=0
   local res=-1
   [ -e /etc/rotation ] && read rotation < /etc/rotation
   psplash --notouch --angle $rotation &
   sleep 2
   psplash-write "MSG Configuring settings..."

   # Make sure dbus is running
   if ! ( pidof dbus-daemon ); then
       mount | grep "tmpfs on /run " || mount -t tmpfs tmpfs /run
       mount | grep "tmpfs on /var/volatile " || mount -t tmpfs tmpfs /var/volatile
       mkdir -p /var/volatile/tmp
       mkdir -p /run/lock

       /etc/init.d/dbus-1 start
   fi

   # Make sure udev is running
   if ! ( pidof udevd ); then
       /etc/init.d/udev start

       udevadm trigger
       udevadm settle
   fi

   res="$( dbus-send --print-reply --system --dest=com.exor.EPAD '/' com.exor.EPAD.applyDefaultSettings string:"/mnt/factory/machine.ini" int32:$what | awk 'FNR == 2 {print $2}' )"

   # Even if configuration failed we have to consider this step done
   # to avoid looping at the next reboot
   touch /etc/configured
   touch /etc/network/interfaces
   sync

   if [ ! "$res" -eq "0" ]; then
      psplash-write "MSG ERROR: device configuration failed!
Please reboot the device
"
      while (true); do
          dbus-send --system --print-reply --dest=com.exor.EPAD "/Buzzer" com.exor.EPAD.Buzzer.beep int32:440 int32:100 &>/dev/null; sleep 3;
      done
   fi

   psplash-write "QUIT"
}

# Perform fsck on ext partitions
# $1 Partition device
exorint_extfsck() {

   e2fsck -p $1

   # If we still have unresolved errors run "fsck -y" and
   # if needed recreate the journal
   if [ $? -gt 3 ]; then
      e2fsck -y $1
      tune2fs -O has_journal $1
   fi
}
